# Server configs
server:
  ## Should be included to show message, if not error message will be empty
  error:
    include-message: always
    include-binding-errors: always

# Custom configurations
app:
  eureka:
    host: localhost
    port: 8761
    user: mt
    pass: p
    # pass: '{cipher}a672bc1a5c86b877ade72bca188ac4b6d33e7a91c3b524cbd86c8f031d1344c8'
  database:
    mongo:
      host: localhost
      port: 27017
  messaging:
    rabbitmq.host: 127.0.0.1
    kafka.broker: 127.0.0.1
  auth-server:
    host: localhost
    port: 9999

spring:
  cloud:
    # As Spring Cloud Ribbon is in maintenance mode.
    # It is recommended switching to BlockingLoadBalancerClient instead.
    loadbalancer.ribbon.enabled: false
  # Massaging provider configurations
    # stream.kafka.binder:
    stream.kafka.bindings:
      brokers: ${app.messaging.kafka.broker}
      defaultBrokerPort: 9092
  rabbitmq:
    host: ${app.messaging.rabbitmq.host}
    port: 5672
    username: guest
    password: guest
    #password: '{cipher}702b8ae88ce0d606c42cd89dd20c43be1100951373416f5eb6f2ab57b0288665'
  # Distributed Tracking configs
  zipkin.sender.type: rabbit
  # sleuth:
  #  traceId128: true
  # sampler.probability: 1.0
# Service discovery configs
eureka:
  instance:
    lease-renewal-interval-in-seconds: 5
    lease-expiration-duration-in-seconds: 5
    # prefer-ip-address: true
    preferIpAddress: true
  client:
    healthcheck.enabled: true
    service-url:
      defaultZone: http://${app.eureka.user}:${app.eureka.pass}@${app.eureka.host}:${app.eureka.port}/eureka/
    initial-instance-info-replication-interval-seconds: 5
    registry-fetch-interval-seconds: 5

ribbon:
  server-list-refresh-interval: 5000
  NF-load-balancer-ping-interval: 5

# Application health and information management
# management:
Ã¤  info.git:
#    mode: full
#    enabled: true
#  endpoints.web.exposure.include: "*"
#  endpoint:
#    shutdown.enabled: true
#    health.show-details: always
management:
  metrics:
    distribution:
      percentiles-histogram:
        all: true
        http:
          server:
            requests: true
    #tags:
  observations:
    key-values:
      application: ${spring.application.name}
      # getDocoota.call: true
  tracing:
    # enabled: true
    sampling:
      probability: 1.0
  info:

    git:
      mode: full
      enabled: true
    java:
      enabled: true
    os:
      enabled: true
  endpoints:
    web:
      exposure:
        include: "*" #health, prometheus #"*"
    jmx:
      exposure:
        include: "*"
  health:
    circuitbreakers:
      enabled: true
  # prometheus
  prometheus:
    metrics:
      export:
        step: 10s
  endpoint:

    health:
      probes:
        enabled: true
      show-components: always
      show-details: always

logging.level:
    org:
      springframework:
        web: DEBUG
    web: DEBUG
    root: INFO
    com.siriusxi.ms.store: DEBUG
    com.siriusxi.cloud.infra: DEBUG

# This is a docker specific profile properties
# Also profiles could be separated in its owen file
# with file name format of "application-docker.yaml"
# docker profile
---
spring:
  profiles: docker
  jmx.enabled: false

app:
  database:
    mongo:
      host: mongodb
  eureka:
    host: eureka
  messaging:
    rabbitmq.host: rabbitmq
    kafka.broker: kafka
  auth-server:
    host: auth-server

# Kafka profile
---
spring:
  profiles: kafka
  cloud.stream.defaultBinder: kafka
  zipkin.sender.type: kafka
  kafka.bootstrap-servers: kafka:9092

management.health.rabbit.enabled: false
